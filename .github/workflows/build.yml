name: Build & Deploy to instance

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }} .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:latest

    - name: Create .env file
      run: |
        echo "#root user" > .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
        echo "#database" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "#express connection" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "#express js port" >> .env
        echo "PORT=${{ secrets.PORT }}" >> .env
        echo "#nodemailer" >> .env
        echo "EMAIL_SERVICE=${{ secrets.EMAIL_SERVICE }}" >> .env
        echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
        echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> .env
        echo "#jwt" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env
        echo "#url" >> .env
        echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env

    - name: Deploy to AWS Lightsail
      env:
        SSH_KEY: ${{ secrets.LIGHTSAIL_SSH_KEY }}
        SSH_USER: ${{ secrets.LIGHTSAIL_SSH_USER }}
        SSH_HOST: ${{ secrets.LIGHTSAIL_SSH_HOST }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST << 'EOF'
          docker-compose down
          docker pull your_dockerhub_username/your_image_name:latest
          docker-compose up -d
        EOF
