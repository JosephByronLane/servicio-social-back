#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('servicio-social-back:server');
var http = require('http');
const { sequelize, Service } = require('../models'); // Adjust the path if necessary

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//dtaanase connection and initialization script
const initializeDatabaseAndStartServer = async () => {
  try {
    
    //check if cooection to DB is ok, we aren't actually authenticating anything, its just an ACK
    try {
      await sequelize.authenticate();
      console.log('Connection to the MariaDB database has been established successfully.');
    } catch (error) {
      console.error('Unable to connect to the database:', error);
    }
    // we sync (create) all needed database tables automatically (god bless automation)
    await sequelize.sync({
      // force: false
     }); //to do hard reset and drop all tables set force to true

    console.log('All models were synchronized successfully.');

    // initial services for service table, THIS IS NEEDED, WE NEED TO SEED THE DATABASE ELSE EVERYTHING BREAKS
    const services = [
      'water',
      'electricity',
      'internet',
      'furnishings',
      'parking',
      'garbage collection',
      'pet friendly',
      'cleaning service',
      'washing service',
      'communal areas',
      'food',
    ];

    //FIXME: this rawdogs and adds everything to the database wether its there or not, 
    for (const serviceName of services) {
      await Service.findOrCreate({
        where: { name: serviceName },
      });
    }

    console.log('Services have been seeded.');

    //start the server

    /**
   * Listen on provided port, on all network interfaces.
   */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } catch (error) {
    console.error('Unable to connect to the database:', error);
    process.exit(1); // Exit the process with failure
  }
};

initializeDatabaseAndStartServer();





/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
